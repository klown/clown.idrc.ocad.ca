Reasons For An Audio Look And Feel1. To allow persons with visual disabilities to use and create java-based applications.2. To enhance the usability of Personal Java Devices with extremely small or non-existant screens.3. To allow individuals to operate Java-based systems in situations where their eyes are otherwise occupied.  E.G. Driving an automobile.4. To allow for consistancy of the interface regardless of the platform being used.  E.G. Components can be identified with the same sound. Overall InterfaceGeneral Philosophy1. The "Look" or method of conveying information to the user is completely auditory in nature.  This feedback can be separated into verbal information and sounds that are not speech related.  The "Feel" or method employed by the user to supply information to the system is exclusively keyboard based.2. The sounds used in this "Audio Look and Feel" were designed from a real world perspective.  The goal was to make the interface as intuitive as possible.  Real world sounds often prove more memorable, and are more universal so as to lessen the barrier presented by language or culture.  3. Higher levels of information can be identified throught the interface with the same sound.  E.G. Opening a Menu always sounds like a drawer being pulled open, Lists are always sonified as a group of three descending notes.  More specific tasks have been matched with sounds that are narrower in scope.  E.G. The action of Cutting text is associated with the sound of scissors, a request from the system to input data is always associated with a scribble noise...4. An effort has been made to minimize the length of sound sequences as well as the sounds themselves.  Not only is it difficult for the usr to retain large segments of auditory data, but there were problems getting strings of sounds to flow together.  E.G. The sound of a key turning in a lock was initally used whenever an action or command was executed, even if that action or command had been matched with its own sound.  The results were less than ideal, and the "key in lock" sound was dropped except in cases where no other cue confirms that execution of a task has been successful. 5. This interface has been designed with a particular learning strategy in mind.  The sounds have intentionally been placed at the beginning of every sequence, in order that they may act as a guide to the user.  E.G. The user will hear a sound, and the sound will be followed by its verbal match.  It is hoped that, as users become more comfortable with the interface, they will hear the sound and understand its meaning without needing to hear the verbal portion of the sequence.  Ideally, the user will be able to adjust the level of verbal prompting received until it has almost disappeared.  The end result will be a more efficient interface that still provides all of the information the user requires.6. This interface is not meant to function as a screen reader.  Although it will provide the user with necessary auditory feedback, and can be used independently, it does not behave like a text to speech application.  It is hoped that this "Audio Look and Feel" will also be used in conjunction with other assistive technology applications, and "Look and Feel's" that concentrate on other sensory modalities.Non-Text ComponentsGeneral Philosophy1. The components were sonified according to their functionality, and not their visual appearance.  E.G. Lists and String Spinners look different, but both are groups of words or numbers from which the user must select items.  Therefore, they have been sonified the same way.  Repetition of sounds where possible puts an emphasis on functionality and creates a more memorable and intuitive interface.Another example involves the grouping of Radio Buttons, Toggles, and Checkboxes into one category.  The information that the user must be given is whether or not the component is depressed, active, or checked.  Although these things look visually different, their functionality suggests that they can either be turned on or off.  Melodies were used to indicate the status of each of these components.  E.G. The melody that identified selection was always the same, as was the melody that identified non-selection.  The distinction between these three components was the tamber of the tune being played.  In other words each was associated with its ownmusical instrument.  Push Buttons were not included in this category because when Buttons appear the user must make a choice.  Once this choice has been made, the Button or Buttons immediately disappear, and so their status cannot be verified by the user.  Information about status is dependent upon which of the Buttons was selected.  2. The same principle of examining the type of information that the user needed to receive was employed when the navigation system for the Menubar and Menu Items was designed.  E.G. One keyboard command acts as a toggle to bring the user onto and off of the Menubar.  However, once a Menu has been opened, the user is able to move from Menu Option to Menu Option by pressing "CTRL+RIGHT/LEFT ARROW."  In other words, the use is able to move up and down from one level to another, and left to right within a given level.  Levels include the Menubar itself, the Menu Titles, the level where Menus are opened, and the Menu Options themselves.The navigation of Tabbed Panes is similar.(See the Enhanced Features section for more information.) 3. There were components that we felt were too visual to sonify.  It was concluded that many of them had been used to solidify concepts through visual means.  E.G. Colour, size, location on the screen...  Often, these components were examined in terms of their smaller parts, and the kind of information they convey.  The primary concern was to include only those pieces of information that were relevant to a user who was hearing rather than seeing the interface.  E.G. The Desktop Pane was a component that cannot be navigated to or activated.  It was broken down in terms of what it contains: internal frames, icons...  These components found within the Desktop Pane were matched with sounds, but it was felt that the user needed additional information.Name of the desktop, if it has any.Names of its internal frames, and the ability to navigate to them.Names of its icons, and the ability to navigate to them.Is it enabled or disabled?This last item is particularly valuable, because if the Desktop Pane is not available, a user who is not looking at the screen could input data without realizing that it has nowhere to go.Other examples include: the separater, scrollbars, split screenresizing...4. We decided to break more complicated components down into their simpler sub-components.  E.G. A Combo Box is made up of a text fieldand a drop down list.  Therefore, when the user encouters a Combo Box the sequence will be: List sound, Text Field noise - verbal Combo Box label.This indicates to the user that this is a List where inputting information is also possible. Text-Based ComponentsGeneral Philosophy1. Many of the navigational aspects of the text area employ the same or similar keyboard commands as popular commersial screen reading packages.  It is highly likely that visually impaired users of a future "Audio Look and Feel" will have had considerable experience accessing computers with text to speech software.  These commonalities will decrease the learning curve required for this interface.  E.G. Read previous and next character, read previous and next line...2. Not all of the possible actions in the text area were matched with sounds.  In certain instances (with colour or fonts) representation with sound is not possible or appropriate.  In other instances (with bold or italics) creating keyboard toggles seemed more logical.  Toggles will allowing the user the opportunity to obtain information about whether a feature like Bold is on or off.  If every text attribute were to be sonified, the user would be presented with an infinite number of sounds, and would likely be unable or unwilling to retain them all.  3. The decision was made to sonify some of the more commonly used text-based commands.  These can be divided into two categories: navigational commands and those used to edit text. Navigation - presence of capital letters, cursor at beginning or end of text, blank lines...Editing - cut, copy, paste, forward delete, backspace, toggles on/off...Outline Of Enhanced Features 1. MenusWithin a given level of the menu system, pressing a key will navigate to the first item whose first letter matches. Subsequent such key presses will navigate to the next matching item. The search wraps. "Within a given level" means, that the search is confined to the current level only, e.g., the menu bar, or a menu.2. Tool barctrl+t			to get to the tool bar.ctrl+left arrow 	to move among the tool bar buttons.ctrl+right arrow 	to move among the tool bar buttons.esc			to leave the tool bar.ctrl+shift+h		describes where you are in the tool bar.ctrl+shift+t		provides a tool tip for a tool bar button.Also, once focus is on the tool bar, pressing a key will navigate to the first item whose first letter matches. Subsequent such key presses will navigate to the next matching item. The search wraps.3. Selected TextA keyboard command is available to read the selected text to the user.4. Tabbed PaneWhen focus is on the tabbed pane, pressing a key will navigate to the first tab whose first letter matches. Subsequent such key presses will navigate to the next matching item. The search wraps.5. Listdown arrow		to move to the next item in the list.up arrow		to move to the previous item in the list.ctrl+shift+h		describes where you are in the list.ctrl+shift+e		lists the currently selected items, if any.Exploration Position and Selectionsctrl+left arrow 	to move to the previous item in the list *.ctrl+right arrow 	to move to the next item in the list *.ctrl+add 		to add the current position to the selection(s).ctrl+subtract 		to remove the current position from the selection(s).* The "exploration position" is specific to the auditory look and feel. Users can use ctrl+left and ctrl+right to navigate among the list items without affecting the visual display. In particular, the current selection is unaffected by these navigation key strokes. Furthermore, these key strokes define a notion of "current item" from the point of view of the auditory look and feel -- once the user decides to add/remove the current item to/from the selection, they may do so using the add/remove key strokes. At that point, the selection is updated visually.Also, once focus is on the list, pressing a key will navigate to the first item whose first letter matches. Subsequent such key presses will navigate to the next matching item. The search wraps.7. Combo Boxctrl+left arrow 	to move and select the previous choice.ctrl+right arrow 	to move and select the next choice.ctrl+shift+h		describes where you are in the combo box.ctrl+shift+r		toggles editing/selecting mode *.* Toggling between editing and selecting works only for editable combo boxes. If you attempt to toggle a non-editable combo box, you will hear a generic error sound. When in selection mode, pressing a key will navigate to and select the first item whose first letter matches. Subsequent such key presses will navigate to the next matching item. The search wraps.The editor in an editable combo box is a text component, and is sonified in the same way as all other text components (see "TextKeystrokes.html"). 8. General Navigation and ActivationIn addition to the specific navigation key strokes noted above, keyboard navigation is accomplished via the default focus manager key strokes, currently. These are tab to move forward, and shift+tab to move backward.Activation of a component is accomplished by return. "Activation" means manipulating the component in its normal way. Thus push buttons are pushed, check boxes are changed from checked to unchecked, or from unchecked to checked, menu's are popped open, menu items are activated, tabs are selected, and so on.9. Extra InformationThere is often other information associated with a component. At present, there is a key stroke to speak the following kinds of extra information. The key stroke is ctrl+shift+E.    * Whether the component has a mnemonic. Mnemonics are shown visually by an underlined letter. The user description of this is "shortcut key". * Whether the component has a keyboard accelerator. These typically appear in menu items as right justified text. An example would be "ctrl+X" for a "Cut" menu item. This type of extra information is described to the user as a "hot key"10. Audio GeneralAlt+F1          toggle echo mode between word and character Ctrl+Shift+H    where am I 11. Text Area KeysF1      speak previous character F2      speak current character F3      speak next character F5      speak previous word F6      speak current word F7      speak next word F9      speak previous sentence F10     speak current sentence F11     speak next sentence F4      speak selected text F8      speak to end of document F12     speak entire document Enter   insert break Tab     insert tab Enter   notify field accept Delete          delete next character Backspace       delete previous character Ctrl+C       copy to clipboard Ctrl+X       cut to clipboard Ctrl+V       paste from clipboard Alt+D           dump model Shift+F11       warp to TextField Shift+F10       warp to PasswordField Shift+F12       warp to TextArea Shift+F9        warp to TextPane Shift+F8        warp to EditorPane   NavigationRight           caret forward Left            caret backward Up              caret up Down            caret down Alt+Left        caret begin word Alt+Right       caret end word Home            caret begin line End             caret end line Ctrl+Right      caret next word Ctrl+Left       caret previous word Ctrl+Up         begin paragraph Ctrl+Down       end paragraph PageUp          page up PageDown        page down Ctrl+Home       begin Ctrl+End        end SelectionShift+Right             selection forward Shift+Left              selection backward Shift+Up                selection up Shift+Down              selection down Shift+Alt+Left          selection begin word Shift+Alt+Right         selection end word Shift+Home              selection begin line Shift+End               selection end line Shift+Ctrl+Up           selection begin paragraph Shift+Ctrl+Down         selection end paragraph Shift+Ctrl+Right        select next word Shift+Ctrl+Left         select previous word Shift+Ctrl+Home         select begin Shift+Ctrl+End          select end Shift+Ctrl+W            select word Shift+Ctrl+L            select line Shift+Ctrl+P            select paragraph Ctrl+A                  select all Styled TextCtrl+L          left justify Ctrl+E          center justify Ctrl+R          right justify Ctrl+B          font bold Ctrl+8          font italic Ctrl+U          font underline Ctrl+Shift+F2   font family Monospaced Ctrl+Shift+F3   font family SansSerif Ctrl+Shift+F4   font family Serif Ctrl+Shift+1    font size 08 Ctrl+Shift+2    font size 10 Ctrl+Shift+3    font size 12 Ctrl+Shift+4    font size 14 Ctrl+Shift+5    font size 16 Ctrl+Shift+6    font size 18 Ctrl+Shift+7    font size 24 Ctrl+Shift+8    font size 36 Ctrl+Shift+9    font size 48   HTML TextCtrl+B          html bold Ctrl+8          html italic Ctrl+Shift+A    html font size bigger Ctrl+Shift+Z    html font size smaller Ctrl+L          html paragraph indent left Ctrl+R          html paragraph indent right Ctrl+F12        html image border Ctrl+F11        html image bottom justify Ctrl+F10        html image center justify Ctrl+F9         html image top justify Ctrl+F8         html logical style normal Ctrl+F7         html color 